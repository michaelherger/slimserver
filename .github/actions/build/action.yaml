name: Build Logitech Media Server
description: Build Logitech Media Server with the given parameters
inputs:
  build-params:
    description: Parameters needed to run the `buildme.pl` script
    required: true
    default: ubuntu-latest
  build-type:
    description: "`nightly` or `production`"
    required: true
    default: nightly

runs:
  using: composite
  steps:
    - name: Get LMS version number
      shell: bash
      id: getversion
      run: |
        MAJOR=$(grep "\$VERSION" server/slimserver.pl | head -n1 | cut -d"'" -f2 | cut -d. -f1)
        MINOR=$(grep "\$VERSION" server/slimserver.pl | head -n1 | cut -d"'" -f2 | cut -d. -f2)

        echo "LMS_VERSION=$MAJOR.$MINOR" >> $GITHUB_OUTPUT
        echo "GIT_BRANCH=public/$MAJOR.$MINOR" >> $GITHUB_OUTPUT

    - name: Check out LMS platform code
      uses: actions/checkout@v4
      with:
        repository: Logitech/slimserver-platforms
        path: platforms
        ref: ${{ steps.getversion.outputs.GIT_BRANCH }}

    - name: Set up Docker environment
      if: ${{ startsWith(inputs.build-params, 'docker') }}
      id: dockersetup
      shell: bash
      run: |
        if [ "${{ steps.getversion.outputs.LMS_VERSION }}" = "8.5" ]; then
          echo "LMS_TAG=--tag=dev" >> $GITHUB_OUTPUT
        else
          echo "LMS_TAG=--tag=stable" >> $GITHUB_OUTPUT
        fi

        echo TEMPORARY DOCKER DEV ONLY!!!!
        sed -ie "s/lmscommunity/mherger/" platforms/buildme.pl
        egrep "tag.*logitechmediaserver" platforms/buildme.pl

    - name: ${{ inputs.build-params }} package on ${{ runner.os }}
      if: ${{ startsWith(inputs.build-params, 'mac') }}
      shell: bash
      run: |
        ssh ${{ secrets.MAC_CONNECT_STRING }} "mkdir -p $BASEDIR; rm -rf $BASEDIR/publish"
        rsync -a --delete server platforms ${{ secrets.MAC_CONNECT_STRING }}:$BASEDIR/

        ssh ${{ secrets.MAC_CONNECT_STRING }} "cd $BASEDIR && platforms/buildme.pl --build macosx --buildDir \$(pwd)/work --sourceDir \$(pwd) --destDir \$(pwd)/publish --releaseType ${{ inputs.build_type }}"

        rm -rf publish
        mkdir -p publish
        scp ${{ secrets.MAC_CONNECT_STRING }}:$BASEDIR/publish/* publish/

        ls -al publish/

        if [ ! -f publish/LogitechMediaServer*pkg ]; then
          exit 1;
        fi

    - name: Build ${{ inputs.build-params }} package on ${{ runner.os }}
      if: ${{ !startsWith(inputs.build-params, 'mac') }}
      shell: bash
      run: |
        SRC_PATH=$PWD

        BUILD_PATH=$SRC_PATH/work
        DEST_PATH=$SRC_PATH/publish

        mkdir -p $BUILD_PATH
        mkdir -p $DEST_PATH

        platforms/buildme.pl --build ${{ inputs.build-params }} ${{ steps.dockersetup.outputs.LMS_TAG }} --buildDir $BUILD_PATH --sourceDir $SRC_PATH --destDir $DEST_PATH --releaseType ${{ inputs.build-type }}

    # TODO - upload to S3
    - name: Upload artifacts
      if: false
      uses: actions/upload-artifact@v3
      with:
        path: publish
