name: Build LMS

# Test using act: act -W .github/workflows/00_build.yaml --pull=false

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        description: 'The branch from which to build from'
        required: true
        default: 'gh-build'
      build_type:
        type: choice
        description: 'Is this a nightly or a release build?'
        required: true
        default: 'nightly'
        options:
          - nightly
          - release

jobs:
  mac:
    name: Build LMS for Mac
    # if: false
    runs-on: self-hosted
    timeout-minutes: 2    # increase once we're actually building...
    env:
      BASEDIR: gh-build
    steps:
      - name: Clean up build host
        run: |
          pwd
          # ssh ${{ secrets.MAC_CONNECT_STRING }} "mkdir -p rm -rf $BASEDIR/work $BASEDIR/publish $BASEDIR/build"
          ssh ${{ secrets.MAC_CONNECT_STRING }} "ls $BASEDIR; echo \$(pwd)"

      # we must check out here, as  otherwise the build action is not available
      - name: Check out LMS code
        uses: actions/checkout@v4
        with:
          path: server
          ref: ${{ inputs.branch }}

      - name: Get Version Nunber
        id: getversion
        run: |
          MAJOR=$(grep "\$VERSION" server/slimserver.pl | head -n1 | cut -d"'" -f2 | cut -d. -f1)
          MINOR=$(grep "\$VERSION" server/slimserver.pl | head -n1 | cut -d"'" -f2 | cut -d. -f2)

          echo "LMS_VERSION=$MAJOR.$MINOR" >> $GITHUB_OUTPUT
          echo "GIT_BRANCH=public/$MAJOR.$MINOR" >> $GITHUB_OUTPUT

      - name: Check out LMS platform code
        uses: actions/checkout@v4
        with:
          repository: Logitech/slimserver-platforms
          path: platforms
          ref: ${{ steps.getversion.outputs.GIT_BRANCH }}

      - name: Build on build host
        shell: bash
        run: |
          ssh ${{ secrets.MAC_CONNECT_STRING }} "mkdir -p $BASEDIR; rm -rf $BASEDIR/publish"
          rsync -a --delete server platforms ${{ secrets.MAC_CONNECT_STRING }}:$BASEDIR/

          ssh ${{ secrets.MAC_CONNECT_STRING }} "cd $BASEDIR && platforms/buildme.pl --build macosx --buildDir \$(pwd)/work --sourceDir \$(pwd) --destDir \$(pwd)/publish --releaseType ${{ inputs.build_type }}"

          rm -rf publish
          mkdir -p publish
          scp ${{ secrets.MAC_CONNECT_STRING }}:$BASEDIR/publish/* publish/

          ls -al publish/

          if [ ! -f publish/LogitechMediaServer*pkg ]; then
            exit 1;
          fi

  linux:
    name: Build LMS for Linux
    if: false
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        flavour:
          - [debian, "--x86_64"]
          - [debian, "--arm"]
          - [debian, "--i386"]
          - [debian, ""]
          - [rpm, ""]
          - [tarball, "--arm"]
          - [tarball, ""]
          - [tarball, "--noCPAN"]

    steps:
      # we must check out here, as  otherwise the build action is not available
      - name: Check out LMS code
        uses: actions/checkout@v4
        with:
          path: server
          ref: ${{ inputs.branch }}

      - name: Prepare build environment
        if: ${{ matrix.flavour[0] != 'tarball' }}
        run: |
          sudo apt update
          sudo apt install apt-transport-https debhelper devscripts

      - name: Launch build process
        uses: ./server/.github/actions/build
        with:
          build-params: ${{ matrix.flavour[0] }} ${{ matrix.flavour[1] }}
          build-type: ${{ inputs.build_type }}

  docker:
    name: Build LMS for Docker
    if: false
    runs-on: ubuntu-22.04

    steps:
      # we must check out here, as  otherwise the build action is not available
      - name: Check out LMS code
        uses: actions/checkout@v4
        with:
          path: server
          ref: ${{ inputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Launch build process
        uses: ./server/.github/actions/build
        with:
          build-params: docker
          build-type: ${{ inputs.build_type }}

  windows:
    name: Build LMS for Windows
    if: false
    runs-on: windows-2022
    steps:
      # we must check out here, as  otherwise the build action is not available
      - name: Check out LMS code
        uses: actions/checkout@v4
        with:
          path: server
          ref: ${{ inputs.branch }}

      - name: Install rsync
        shell: bash
        run: |
          curl -sL https://github.com/facebook/zstd/releases/download/v1.5.5/zstd-v1.5.5-win64.zip --output xxx
          unzip -q xxx
          cp zstd-v1.5.5-win64/zstd.exe 'c:\Program Files\Git\usr\bin\'
          rm -rf zstd* xxx

          curl -sL https://repo.msys2.org/msys/x86_64/rsync-3.2.7-2-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xf xxx
          cp usr/bin/rsync.exe 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -sL https://repo.msys2.org/msys/x86_64/libzstd-1.5.5-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xf xxx
          cp usr/bin/msys-zstd-1.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -sL https://repo.msys2.org/msys/x86_64/libxxhash-0.8.1-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xf xxx
          cp usr/bin/msys-xxhash-0.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -sL https://repo.msys2.org/msys/x86_64/liblz4-1.9.4-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xf xxx
          cp usr/bin/msys-lz4-1.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -sL https://repo.msys2.org/msys/x86_64/libopenssl-3.1.1-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xf xxx
          cp usr/bin/msys-crypto-3.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr .BUILDINFO .MTREE .PKGINFO

      - name: Launch build process
        uses: ./server/.github/actions/build
        with:
          build-params: win64
          build-type: ${{ inputs.build_type }}
