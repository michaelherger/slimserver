name: Build LMS
on:
  push:
  workflow_dispatch:
  # schedule: only if more recent than
  # https://github.com/nvim-neorocks/luarocks-tag-release#version-optional

env:
  BUILD_TYPE: nightly

jobs:
  linux:
    if: false
    name: Build LMS for Linux
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        flavour:
          - [debian, "--x86_64"]
          - [debian, "--arm"]
          - [debian, "--i386"]
          - [debian, ""]
          - [rpm, ""]
          - [tarball, "--arm"]
          - [tarball, "--noCPAN"]
          - [tarball, ""]

    steps:
      - name: Check out LMS code
        uses: actions/checkout@v3
        with:
          path: server

      - name: Prepare build environment
        id: preparation
        run: |
          sudo apt update
          sudo apt install apt-transport-https debhelper devscripts

          MAJOR=$(grep "\$VERSION" server/slimserver.pl | head -n1 | cut -d"'" -f2 | cut -d. -f1)
          MINOR=$(grep "\$VERSION" server/slimserver.pl | head -n1 | cut -d"'" -f2 | cut -d. -f2)

          echo "LMS_VERSION=public/$MAJOR.$MINOR" >> $GITHUB_OUTPUT

      - name: Check out LMS platform code
        uses: actions/checkout@v3
        with:
          repository: Logitech/slimserver-platforms
          path: platforms
          ref: ${{ steps.preparation.outputs.LMS_VERSION }}

      - name: Build ${{ matrix.flavour[0] }} ${{ matrix.flavour[1] }} package
        run: |
          BUILD_PATH=$GITHUB_WORKSPACE/work
          DEST_PATH=$GITHUB_WORKSPACE/publish

          mkdir -p $BUILD_PATH
          mkdir -p $DEST_PATH

          platforms/buildme.pl --build ${{ matrix.flavour[0] }} ${{ matrix.flavour[1] }} --buildDir $BUILD_PATH --sourceDir $GITHUB_WORKSPACE --destDir $DEST_PATH --releaseType ${{ env.BUILD_TYPE }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: publish

  windows:
    name: Build LMS for Windows
    runs-on: windows-2022
    steps:
      # we must check out here, as  otherwise the build action is not available
      - name: Check out LMS code
        uses: actions/checkout@v3
        with:
          path: server

      - name: Install rsync
        shell: bash
        run: |
          curl -L https://github.com/facebook/zstd/releases/download/v1.5.5/zstd-v1.5.5-win64.zip --output xxx
          unzip xxx
          cp zstd-v1.5.5-win64/zstd.exe  'c:\Program Files\Git\usr\bin\'
          rm -rf zstd* xxx

          curl -L https://repo.msys2.org/msys/x86_64/rsync-3.2.7-2-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xvf xxx
          cp usr/bin/rsync.exe 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -L https://repo.msys2.org/msys/x86_64/libzstd-1.5.5-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xvf xxx
          cp usr/bin/msys-zstd-1.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -L https://repo.msys2.org/msys/x86_64/libxxhash-0.8.1-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xvf xxx
          cp usr/bin/msys-xxhash-0.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -L https://repo.msys2.org/msys/x86_64/liblz4-1.9.4-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xvf xxx
          cp usr/bin/msys-lz4-1.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -L https://repo.msys2.org/msys/x86_64/libopenssl-3.1.1-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xvf xxx
          cp usr/bin/msys-crypto-3.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr .BUILDINFO .MTREE .PKGINFO

      - name: Launch build process...
        uses: ./server/.github/actions/build
        with:
          build-params: win64
          build-type: ${{ env.BUILD_TYPE }}
