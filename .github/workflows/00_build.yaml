name: Build LMS

# Test using act: act -W .github/workflows/00_build.yaml --pull=false

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        description: 'The branch from which to build from'
        required: true
        default: 'gh-build'
      build_type:
        type: choice
        description: 'Is this a nightly or a release build?'
        required: true
        default: 'nightly'
        options:
          - nightly
          - release

jobs:
  macLegacy:
    name: Build LMS for Mac (Legacy)
    runs-on: self-hosted
    timeout-minutes: 2    # increase once we're actually building...
    env:
      BASEDIR: gh-build
    steps:
      # we must check out here, as  otherwise the build action is not available
      - name: Check out LMS code
        uses: actions/checkout@v4
        with:
          path: server
          ref: ${{ inputs.branch }}

      - name: Launch build process
        uses: ./server/.github/actions/build
        with:
          build-params: macosx
          build-type: ${{ inputs.build_type }}
          mac-connect-string: ${{ secrets.MAC_CONNECT_STRING }}
          AWS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  mac:
    name: Build LMS for Mac (MenuBar Item)
    runs-on: macos-11
    steps:
      # we must check out here, as  otherwise the build action is not available
      - name: Check out LMS code
        uses: actions/checkout@v4
        with:
          path: server
          ref: ${{ inputs.branch }}

      - name: Install Platypus
        env:
          # see https://github.com/sveinbjornt/Platypus/blob/a42d829e8d03991d7437ed7e0e4d929ad8b32835/Common.h#L58-L76
          CMDLINE_BIN_PATH: /usr/local/bin
          CMDLINE_SHARE_PATH: /usr/local/share/platypus
          CMDLINE_MANDIR_PATH: /usr/local/share/man/man1
          CMDLINE_SCRIPTEXEC_GZIP_NAME: ScriptExec.gz
          CMDLINE_SCRIPT_EXEC_PATH: /usr/local/share/platypus/ScriptExec
          CMDLINE_NIB_NAME: MainMenu.nib
          CMDLINE_PROGNAME_BUNDLE: platypus_clt.gz
          CMDLINE_TOOL_PATH: /usr/local/bin/platypus
        run: |
          curl -Lo platypus.zip https://github.com/sveinbjornt/Platypus/releases/download/v5.4.1/platypus5.4.1.zip
          unzip -qd platypus platypus.zip

          # https://github.com/sveinbjornt/Platypus/blob/a42d829e8d03991d7437ed7e0e4d929ad8b32835/Application/Resources/InstallCommandLineTool.sh

          # Change to Resources directory of Platypus application
          cd "$PWD/platypus/Platypus.app/Contents/Resources"

          REAL_USER_ID=`/usr/bin/id -r -u`

          # Create directories if they don't exist
          echo "Creating directory structures"
          mkdir -p "$CMDLINE_BIN_PATH"
          mkdir -p "$CMDLINE_SHARE_PATH"

          echo "Copying resources to share directory"
          gunzip -c "$CMDLINE_SCRIPTEXEC_GZIP_NAME" > "$CMDLINE_SCRIPT_EXEC_PATH"
          cp -r "$CMDLINE_NIB_NAME" "$CMDLINE_SHARE_PATH"
          chown -R ${REAL_USER_ID} "$CMDLINE_SHARE_PATH"
          chmod -R 755 "$CMDLINE_SHARE_PATH"

          echo "Installing command line tool"
          gunzip -c "$CMDLINE_PROGNAME_BUNDLE" > "$CMDLINE_TOOL_PATH"
          chown ${REAL_USER_ID} "$CMDLINE_TOOL_PATH"
          chmod +x "$CMDLINE_TOOL_PATH"

          platypus -v

          exit 0

      - name: Launch build process
        uses: ./server/.github/actions/build
        with:
          build-params: macos
          build-type: ${{ inputs.build_type }}
          AWS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  linux:
    name: Build LMS for Linux
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        flavour:
          - [debian, "--x86_64"]
          - [debian, "--arm"]
          - [debian, "--i386"]
          - [debian, ""]
          - [rpm, ""]
          - [tarball, "--arm"]
          - [tarball, ""]
          - [tarball, "--noCPAN"]

    steps:
      # we must check out here, as  otherwise the build action is not available
      - name: Check out LMS code
        uses: actions/checkout@v4
        with:
          path: server
          ref: ${{ inputs.branch }}

      - name: Prepare build environment
        if: ${{ matrix.flavour[0] != 'tarball' }}
        run: |
          sudo apt update
          sudo apt install apt-transport-https debhelper devscripts

      - name: Launch build process
        uses: ./server/.github/actions/build
        with:
          build-params: ${{ matrix.flavour[0] }} ${{ matrix.flavour[1] }}
          build-type: ${{ inputs.build_type }}
          AWS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  docker:
    name: Build LMS for Docker
    runs-on: ubuntu-22.04

    steps:
      # we must check out here, as  otherwise the build action is not available
      - name: Check out LMS code
        uses: actions/checkout@v4
        with:
          path: server
          ref: ${{ inputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Launch build process
        uses: ./server/.github/actions/build
        with:
          build-params: docker
          build-type: ${{ inputs.build_type }}

  windows:
    name: Build LMS for Windows
    runs-on: windows-2022
    steps:
      # we must check out here, as  otherwise the build action is not available
      - name: Check out LMS code
        uses: actions/checkout@v4
        with:
          path: server
          ref: ${{ inputs.branch }}

      - name: Install rsync
        shell: bash
        run: |
          curl -sL https://github.com/facebook/zstd/releases/download/v1.5.5/zstd-v1.5.5-win64.zip --output xxx
          unzip -q xxx
          cp zstd-v1.5.5-win64/zstd.exe 'c:\Program Files\Git\usr\bin\'
          rm -rf zstd* xxx

          curl -sL https://repo.msys2.org/msys/x86_64/rsync-3.2.7-2-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xf xxx
          cp usr/bin/rsync.exe 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -sL https://repo.msys2.org/msys/x86_64/libzstd-1.5.5-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xf xxx
          cp usr/bin/msys-zstd-1.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -sL https://repo.msys2.org/msys/x86_64/libxxhash-0.8.1-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xf xxx
          cp usr/bin/msys-xxhash-0.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -sL https://repo.msys2.org/msys/x86_64/liblz4-1.9.4-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xf xxx
          cp usr/bin/msys-lz4-1.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr

          curl -sL https://repo.msys2.org/msys/x86_64/libopenssl-3.1.1-1-x86_64.pkg.tar.zst --output xxx
          tar -I zstd -xf xxx
          cp usr/bin/msys-crypto-3.dll 'c:\Program Files\Git\usr\bin\'
          rm -rf xxx usr .BUILDINFO .MTREE .PKGINFO

      - name: Launch build process
        uses: ./server/.github/actions/build
        with:
          build-params: win64
          build-type: ${{ inputs.build_type }}
          AWS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# TODO - re-build repository file
